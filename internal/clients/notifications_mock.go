// Code generated by MockGen. DO NOT EDIT.
// Source: internal/clients/notifications.go

// Package clients is a generated GoMock package.
package clients

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockChannelNotificator is a mock of ChannelNotificator interface.
type MockChannelNotificator struct {
	ctrl     *gomock.Controller
	recorder *MockChannelNotificatorMockRecorder
}

// MockChannelNotificatorMockRecorder is the mock recorder for MockChannelNotificator.
type MockChannelNotificatorMockRecorder struct {
	mock *MockChannelNotificator
}

// NewMockChannelNotificator creates a new mock instance.
func NewMockChannelNotificator(ctrl *gomock.Controller) *MockChannelNotificator {
	mock := &MockChannelNotificator{ctrl: ctrl}
	mock.recorder = &MockChannelNotificatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChannelNotificator) EXPECT() *MockChannelNotificatorMockRecorder {
	return m.recorder
}

// Notify mocks base method.
func (m *MockChannelNotificator) Notify(ctx context.Context, channelName channelName, msg string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Notify", ctx, channelName, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Notify indicates an expected call of Notify.
func (mr *MockChannelNotificatorMockRecorder) Notify(ctx, channelName, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockChannelNotificator)(nil).Notify), ctx, channelName, msg)
}
